@startuml

class Interval{
- initialTime : LocalDateTime
- endTime : LocalDateTime
- timeFormatter : DateTimeFormatter
- owner : Task
- time : Duration
- logger : Logger
- marker : Marker
+ Interval(owner : Task, begin : LocalDateTime , end : LocalDateTime, duration : Duration)
+ Interval(begin : LocalDateTime , end : LocalDateTime, duration : Duration)
+ Interval(begin: LocalDateTime, owner : Task)
+ Interval(owner : Task)
+ printer()
+ update(o : Observable ,arg : Object)
}

class Client{
+ {static} main(String[] args)
- {static} testA()
- {static} testB()
- {static} testFita2()
- {static} createTree()
- {static} saveData(root : Project)
- {static} loadData(filename : String)
}
class Clock extends Observable{
- date : LocalDateTime
- timer : Timer
- clockTimer : Clock
- periodo : int
- Clock()
+ start()
+ stop()
}

class JsonVisitor implements Visitor{
- proyectoActual : JSONObject
- proyectoAnterior : JSONObject
- proyectos: JSONArray
- tareas : JSONArray
- logger : Logger
- marker : Marker
+ visitProject(p : Project)
+ visitTask(t : Task)
- createjsoncomponent(c : Component) : JSONObject
- createjsonproject(p: Project) : JSONObject
- createjsontask(t: Task) : JSONObject
- createTree(jsonObject : JSONObject, father : Project) : Component
+ save(fileName : String)
+ load(fileName : String) : Project
+ print()
}

class SearchByTag implements Visitor{
- tag : String
- result : ArrayList<Component>
- logger : Logger
- marker : Marker
+ SearchByTag(tag : String)
+ visitProject(p : Project)
+ visitTask(t : Task)
+ search(p : Project,tag : String)
+ search(t : Task,tag : String)
- print(list : ArrayList<Component>, tag : String)
}

abstract class Component{
- compName : String
- father : Project
- startDate : LocalDateTime
- endDate : LocalDateTime
- tagList : ArrayList<String>
- time : Duration
- timeFormatter : DateTimeFormatter
- logger : Logger
- marker : Marker
+ Component (name : String, start : LocalDateTime, LocalDateTime : LocalDateTime, tags : ArrayList<String>)
+ Component(compName : String, father : Project , tagList : ArrayList<String>)
+ Component (compName : String, father : Project )
+ Component (name : String, tags : ArrayList<String>)
+ Component (name : String)
+ update(endTime : LocalDateTime)
+ accept(v : Visitor)
+ printer()
}

class Project extends Component{
- compList : ArrayList<Component>
+ Project (name : String, start : LocalDateTime, LocalDateTime : LocalDateTime, tags : ArrayList<String>)
+ Project(compName : String, father : Project , tagList : ArrayList<String>)
+ Project (compName : String, father : Project )
+ Project (name : String, tags : ArrayList<String>)
+ Project (name : String)
+ setCompList(compList : ArrayList<Component>)
+ addComponent(c : Component)
+ accept(v : Visitor)
+ toString() : String
}

class Task extends Component{
- intervalList : ArrayList<Interval>
+ Task(name : String, father : Project,start : LocalDateTime, end : LocalDateTime, tags : ArrayList<String>, time : Duration)
+ Task (compName : String, father : Project , tagList : ArrayList<String>)
+ Task (name : String, tags : ArrayList<String>)
+ start()
+ stop()
+ accept(v : Visitor)
+ toString() : String
}

interface Visitor{
+ visitProject(p Project)
+ visitTask(t Task)
}

class Observer{
+ update(o : Observable, arg : Object)
}

Project *-right-> "0..*" Component
Interval --right--> "*..1" Task
Observable --down> Observer
Interval ..up|> Observer
Client --> Component
Visitor --left> Client
@enduml